# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S-yDAcuislp6ZMAQWEFFeQAANPasNQUk
"""
import time
import pandas as pd
import numpy as np
from sklearn.utils import resample

url = 'https://raw.githubusercontent.com/richardchiquet/FormationFoot/main/data-modified.csv'

df = pd.read_csv(url,index_col=0)

df_majority1 = df[df['Formation']==433]
df_majority2 = df[df['Formation']==4231]
df_majority3 = df[df['Formation']==352]
df_majority4 = df[df['Formation']==442]

maj_class1 = resample(df_majority1, 
                                 replace=True,     
                                 n_samples=1324,    
                                 random_state=123) 
maj_class2 = resample(df_majority2, 
                                 replace=True,     
                                 n_samples=1324,    
                                 random_state=123) 
maj_class3 = resample(df_majority3, 
                                 replace=True,     
                                 n_samples=1324,    
                                 random_state=123) 
maj_class4 = resample(df_majority4, 
                                 replace=True,     
                                 n_samples=1324,    
                                 random_state=12)

df=pd.concat([maj_class1,maj_class2,maj_class3,maj_class4])



X = df.iloc[:,1:23].values
y = df.iloc[:,0].values


from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.05, random_state=0)

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.fit_transform(X_test)



from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
classifier = RandomForestClassifier(n_estimators=65,random_state=0)
classifier.fit(X_train,y_train)
start= time.time()
y_pred=classifier.predict(X_test)
print("précision:")
print(accuracy_score(y_test,y_pred))
print("temps de calcul de la prédiction:")
print(time.time()- start)

